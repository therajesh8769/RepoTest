const express = require('express');
const GitHubService = require('../services/githubService');
const FileService = require('../services/fileService');
const { authenticateToken } = require('../utils/authMiddleware');
const logger = require('../utils/logger');

const router = express.Router();
const fileService = new FileService();

router.use(authenticateToken);

router.get('/repositories', async (req, res) => {
  try {
    const githubService = new GitHubService(req.headers.authorization.split(' ')[1]);
    const repositories = await githubService.getUserRepositories();
    res.json(repositories);
  } catch (error) {
    logger.error('Failed to fetch repositories', { error: error.message });
    res.status(500).json({ error: error.message });
  }
});

router.get('/repositories/:owner/:repo/branches', async (req, res) => {
  try {
    const { owner, repo } = req.params;
    const githubService = new GitHubService(req.headers.authorization.split(' ')[1]);
    const branches = await githubService.getRepositoryBranches(owner, repo);
    res.json(branches);
  } catch (error) {
    logger.error('Failed to fetch branches', { error: error.message });
    res.status(500).json({ error: error.message });
  }
});

router.get('/repositories/:owner/:repo/contents', async (req, res) => {
  try {
    const { owner, repo } = req.params;
    const { branch = 'main', path = '' } = req.query;
    
    const githubService = new GitHubService(req.headers.authorization.split(' ')[1]);
    let contents = await githubService.getRepositoryContents(owner, repo, path, branch);
    
    // Filter to only include code files and exclude test files
    contents = fileService.filterCodeFiles(contents);
    
    res.json(contents);
  } catch (error) {
    logger.error('Failed to fetch repository contents', { error: error.message });
    res.status(500).json({ error: error.message });
  }
});

router.post('/repositories/:owner/:repo/files/content', async (req, res) => {
  try {
    const { owner, repo } = req.params;
    const { files, branch = 'main' } = req.body;
    
    fileService.validateFiles(files);
    
    const githubService = new GitHubService(req.headers.authorization.split(' ')[1]);
    
    const fileContents = await Promise.all(
      files.map(async (file) => {
        const content = await githubService.getFileContent(owner, repo, file.path, branch);
        return {
          ...file,
          content: content.content,
          sha: content.sha,
          language: fileService.getFileLanguage(file.path)
        };
      })
    );
    
    res.json(fileContents);
  } catch (error) {
    logger.error('Failed to fetch file contents', { error: error.message });
    res.status(500).json({ error: error.message });
  }
});

router.post('/repositories/:owner/:repo/pull-request', async (req, res) => {
  try {
    const { owner, repo } = req.params;
    const { testCode, testSummary, originalFile, branch = 'main' } = req.body;
    
    if (!testCode || !testSummary || !originalFile) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    
    const githubService = new GitHubService(req.headers.authorization.split(' ')[1]);
    
    // Get the base branch SHA
    const branches = await githubService.getRepositoryBranches(owner, repo);
    const baseBranch = branches.find(b => b.name === branch);
    
    if (!baseBranch) {
      return res.status(404).json({ error: `Branch ${branch} not found` });
    }
    
    const newBranchName = 'add-ai-tests';
    
    // Create new branch
    await githubService.createBranch(owner, repo, newBranchName, baseBranch.sha);
    
    // Generate test file name and path
    const testFileName = new (require('../services/aiService'))().generateTestFileName(originalFile.path, testSummary);
    
    // Create test file
    await githubService.createFile(
      owner,
      repo,
      testFileName,
      testCode,
      `Add AI-generated tests for ${originalFile.path}`,
      newBranchName
    );
    
    // Create pull request
    const pullRequest = await githubService.createPullRequest(
      owner,
      repo,
      `Add AI-generated tests for ${originalFile.path}`,
      `This PR adds AI-generated test cases for the file \`${originalFile.path}\`.\n\n**Test Summary:**\n${testSummary.title}\n\n${testSummary.description}\n\n**Generated by:** AI Test Case Generator`,
      newBranchName,
      branch
    );
    
    res.json({
      pullRequest,
      testFileName,
      branchName: newBranchName
    });
  } catch (error) {
    logger.error('Failed to create pull request', { error: error.message });
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;